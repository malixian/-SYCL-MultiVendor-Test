/*************************************************************************
 * Copyright (C) [2020] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include <bang.h>

#define EPS 1e-7
#define CHANNELS 64
#define HEIGHT 4
#define WIDTH 4
#define KERNEL_H 2
#define KERNEL_W 2
#define INPUT_SIZE CHANNELS * WIDTH * HEIGHT
#define OUTPUT_SIZE (CHANNELS * (HEIGHT / KERNEL_H) * (WIDTH / KERNEL_W))
#define STRIDE_H 1
#define STRIDE_W 1
__mlu_entry__ void Kernel(float* dst, float* source) {
  __nram__ float dest[OUTPUT_SIZE];
  __nram__ float src[INPUT_SIZE];
  __memcpy(src, source, INPUT_SIZE * sizeof(float), GDRAM2NRAM);
  __bang_maxpool(dest, src, CHANNELS, HEIGHT, WIDTH, KERNEL_H, KERNEL_W, STRIDE_H, STRIDE_W);
  __memcpy(dst, dest, OUTPUT_SIZE * sizeof(float), NRAM2GDRAM);
}

int main(void)
{
  cnrtQueue_t queue;
  // select device
  CNRT_CHECK(cnrtSetDevice(0));
  // create task queue
  CNRT_CHECK(cnrtQueueCreate(&queue));

  // set kernel's task size
  cnrtDim3_t dim = {1, 1, 1};
  // set kernel's task type
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_BLOCK;

  // create Notifier
  cnrtNotifier_t start, end;
  CNRT_CHECK(cnrtNotifierCreate(&start));
  CNRT_CHECK(cnrtNotifierCreate(&end));

  float* host_dst = (float*)malloc(OUTPUT_SIZE * sizeof(float));
  float* host_src = (float*)malloc(INPUT_SIZE * sizeof(float));

  for (int i = 0; i < INPUT_SIZE; i++) {
    host_src[i] = i;
  }

  float* mlu_dst;
  float* mlu_src;
  // allocate device memory
  CNRT_CHECK(cnrtMalloc((void**)&mlu_dst, OUTPUT_SIZE * sizeof(float)));
  CNRT_CHECK(cnrtMalloc((void**)&mlu_src, INPUT_SIZE * sizeof(float)));
  
  // copy host data to device memory
  CNRT_CHECK(cnrtMemcpy(mlu_src, host_src, INPUT_SIZE * sizeof(float), cnrtMemcpyHostToDev));

  // place Notifier into the task queue
  CNRT_CHECK(cnrtPlaceNotifier(start, queue));
  // launch kernel and add it to task queue
  Kernel<<<dim, ktype, queue>>>(mlu_dst, mlu_src);
  CNRT_CHECK(cnrtPlaceNotifier(end, queue));

  // wait for the task queue to complete execution
  cnrtQueueSync(queue);
  // copy result to host side
  CNRT_CHECK(cnrtMemcpy(host_dst, mlu_dst, OUTPUT_SIZE * sizeof(float), cnrtMemcpyDevToHost));

  bool passed = true;
  
  /*
  for (int i = 1; i < OUTPUT_SIZE; i++) {
    if ((575+i) != int(host_dst[i])) {
      passed = false;
      printf("expect %d, but %d got!\n", 575+i, int(host_dst[i]));
    }
    
  }
  */

  printf(passed ? "PASSED\n" : "FAILED\n");

  float timeTotal;
  // calculate time
  CNRT_CHECK(cnrtNotifierDuration(start, end, &timeTotal));
  printf("Total Time: %.3f ms\n", timeTotal * 3 / 1000.0);

  // free task queue
  CNRT_CHECK(cnrtQueueDestroy(queue));

  // free device memory
  cnrtFree(mlu_dst);
  cnrtFree(mlu_src);
  // free host memory
  free(host_dst);
  free(host_src);

  return 0;
}
